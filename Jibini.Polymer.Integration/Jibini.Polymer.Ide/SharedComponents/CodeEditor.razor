@using Jibini.Polymer.Prototype.Grammar
@using Jibini.Polymer.Prototype.Lexer
@using Newtonsoft.Json
@using System.Runtime.CompilerServices
@inject IJSRuntime js

<KeepWithin>
    <div class="code-editor" @ref="@editorPane"
        tabindex="1" contenteditable="true" spellcheck="false">

        @parsedCode

    </div>
</KeepWithin>

@code {
    [Parameter]
    public string RawContent { get; set; } = "";

    [Parameter]
    public EventCallback<string> RawContentChanged { get; set; }

    [Parameter]
    public int CursorPosition { get; set; }

    [Parameter]
    public EventCallback<int> CursorPositionChanged { get; set; }

    [Parameter]
    public bool CursorMenuShown { get; set; }

    [Parameter]
    public EventCallback<bool> CursorMenuShownChanged { get; set; }

    private RenderFragment? parsedCode;
    private CancellationTokenSource? parseCancel;
    private IJSObjectReference? script;
    private ElementReference? editorPane;
    private int lastHash;
    private string compiled = "";

    private async IAsyncEnumerable<(int, string, Token)> _ParseContentAsync([EnumeratorCancellation] CancellationToken cancel)
    {
        TokenStream source = RawContent;
        source.SkipDiscard = false;

        for (;
            // Broken into tasks to avoid freezing UI
            await Task.Run(() => source.Next) is not null;
            source.Poll())
        {
            if (cancel.IsCancellationRequested)
            {
                yield break;
            }
            yield return (source.Offset, source.Text, source.Next!.Value);
        }
    }

    private async Task<RenderFragment> _DrawCodeAsync(CancellationToken cancel)
    {
        var fragments = new List<RenderFragment>();

        Token? s = null;
        string? t = null;

        RenderFragment cursorContent =
            @<div class="cursor-content @(CursorMenuShown ? "d-block" : "d-none")">

                <h3>@s</h3>
                <h4>@t</h4>
                <hr />
                <p>
                    <pre><c>@compiled</c></pre>
                </p>

            </div>;

        await foreach (var (i, text, token) in _ParseContentAsync(cancel))
        {
            fragments.Add(
                @<pre class="tok ch_@token" @onclick="@(async () => await MoveCursorToAsync(i))">@text</pre>
                );
            if (i < CursorPosition && i + text.Length >= CursorPosition)
            {
                s = token;
                t = text;
                fragments.Add(
                    @<span class="cursor" contenteditable="false"><KeepIn>@cursorContent</KeepIn></span>
                    );
            }
        }
        return @<text> @foreach (var f in fragments) { @f } </text>;
    }

    private void _TriggerDrawCode()
    {
        try
        {
            parseCancel?.Cancel();
            parseCancel?.Dispose();
        } catch (Exception)
        {
        }

        var detach = async () =>
        {
            var p = (parseCancel = new());
            var result = await _DrawCodeAsync(p.Token);

            if (p.IsCancellationRequested)
            {
                return;
            }
            parsedCode = result;
            _ = InvokeAsync(StateHasChanged);

            try
            {
                await Task.Delay(1500, cancellationToken: p.Token);
                
                var success = new Statements(null).TryMatch(RawContent, out var dto);
                compiled = $"Valid: {success}; {JsonConvert.SerializeObject(dto, Formatting.Indented)}";
                _ = InvokeAsync(StateHasChanged);
            } catch (Exception)
            {
            }
        };
        _ = detach.Invoke();
    }

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        script ??= await js.ImportAsync("CodeEditor.razor.js");
        if (firstRender)
        {
            await script.InvokeVoidAsync("bindEditorEvents", DotNetObjectReference.Create(this), editorPane);
        }

        var newHash = RawContent.GetHashCode();
        var same = newHash == lastHash;
        lastHash = newHash;

        if (!firstRender && same)
        {
            return;
        }
        _TriggerDrawCode();
    }

    [JSInvokable]
    public async Task EnterContentAsync(string content)
    {
        var oldContentLength = RawContent.Length;

        RawContent = RawContent.Insert(CursorPosition, content);
        await RawContentChanged.InvokeAsync(RawContent);

        CursorPosition += RawContent.Length - oldContentLength;
        await CursorPositionChanged.InvokeAsync(CursorPosition);

        _TriggerDrawCode();
    }

    [JSInvokable]
    public async Task OnKeyPressedAsync(string key)
    {
        var oldContentLength = RawContent.Length;
        switch (key)
        {
            case "Alt":
            case "CapsLock":
            // Control is filtered in JS module
            case "Control":
            case "Delete":
            case "End":
            case "F1":
            case "F2":
            case "F3":
            case "F4":
            case "F5":
            case "F6":
            case "F7":
            case "F8":
            case "F9":
            case "F10":
            case "F11":
            case "F12":
            case "Home":
            case "Insert":
            case "Meta":
            case "NumLock":
            case "PageDown":
            case "PageUp":
            case "Pause":
            case "Shift":
                break;

            case "Backspace":
                if (CursorPosition > 0)
                {
                    RawContent = RawContent.Remove(CursorPosition - 1, 1);
                }
                break;
            case "Enter":
                RawContent = RawContent.Insert(CursorPosition, "\n");
                break;
            case "Escape":
                CursorMenuShown = false;
                await CursorMenuShownChanged.InvokeAsync(CursorMenuShown);
                break;
            case "Tab":
                RawContent = RawContent.Insert(CursorPosition, "    ");
                break;

            case "ArrowLeft":
                CursorPosition = Math.Max(0, CursorPosition - 1);
                break;
            case "ArrowUp":
                break;
            case "ArrowRight":
                CursorPosition = Math.Min(RawContent.Length, CursorPosition + 1);
                break;
            case "ArrowDown":
                break;

            default:
                RawContent = RawContent.Insert(CursorPosition, key);
                CursorMenuShown = true;
                await CursorMenuShownChanged.InvokeAsync(CursorMenuShown);
                break;
        }
        await RawContentChanged.InvokeAsync(RawContent);

        CursorPosition += RawContent.Length - oldContentLength;
        await CursorPositionChanged.InvokeAsync(CursorPosition);

        _TriggerDrawCode();
    }

    private async Task MoveCursorToAsync(int charIndex)
    {
        CursorPosition = charIndex;
        await CursorPositionChanged.InvokeAsync(CursorPosition);

        _TriggerDrawCode();
    }
}
